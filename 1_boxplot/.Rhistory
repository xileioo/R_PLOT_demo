names <- rownames(ref)
head(names)
names <- rownames(ref)
names_TRAV <- names[names %like% "TRAV"]
names_TRAJ <- names[names %like% "TRAJ"]
names_TRBV <- names[names %like% "TRBV"]
names_TRBJ <- names[names %like% "TRBJ"]
names_TRAV
length(names_TRAV)
names_TRAJ <- names[names %like% "TRAJ"]
rep("TRAV",length(names_TRAV))
VJ_name <- data.frame(genes = c(names_TRAV,names_TRAJ,names_TRBV,names_TRBJ),
gene_type = c(rep("TRAV",length(names_TRAV)),
rep("TRAJ",length(names_TRAJ)),
rep("TRBV",length(names_TRBV)),
rep("TRBJ",length(names_TRBJ))))
VJ_name
ref <- readDNAStringSet(myVDJ_ref_file)
head(ref)
ref <- as.data.frame(ref)
ref <- ref[!(rownames(ref) %like% "5'UTR"),,drop = F]
names <- rownames(ref)
names_TRAV <- names[names %like% "TRAV"]
names_TRAJ <- names[names %like% "TRAJ"]
names_TRBV <- names[names %like% "TRBV"]
names_TRBJ <- names[names %like% "TRBJ"]
VJ_name <- data.frame(genes = c(names_TRAV,names_TRAJ,names_TRBV,names_TRBJ),
gene_type = c(rep("TRAV",length(names_TRAV)),
rep("TRAJ",length(names_TRAJ)),
rep("TRBV",length(names_TRBV)),
rep("TRBJ",length(names_TRBJ))))
VJ_name
table(VJ_name$gene_type)
library(Biostrings)
library(data.table)
myVDJ_ref_file = 'D:/work/reference/cellranger/refdata-cellranger-vdj-GRCm38-alts-ensembl-5.0.0/fasta/regions.fa'
ref <- readDNAStringSet(myVDJ_ref_file)
head(ref)
ref <- as.data.frame(ref)
ref <- ref[!(rownames(ref) %like% "5'UTR"),,drop = F]
names <- rownames(ref)
names_TRAV <- names[names %like% "TRAV"]
names_TRAJ <- names[names %like% "TRAJ"]
names_TRBV <- names[names %like% "TRBV"]
names_TRBJ <- names[names %like% "TRBJ"]
VJ_name <- data.frame(genes = c(names_TRAV,names_TRAJ,names_TRBV,names_TRBJ),
gene_type = c(rep("TRAV",length(names_TRAV)),
rep("TRAJ",length(names_TRAJ)),
rep("TRBV",length(names_TRBV)),
rep("TRBJ",length(names_TRBJ))))
VJ_name
tmp <- strsplit(VJ_name$genes,"|")
head(tmp)
tmp <- strsplit(VJ_name$genes,"\\|")
head(tmp)
tmp <- do.call(rbind,tmp)
head(tmp)
VJ_name$Gene <- tmp[,3]
head(VJ_name)
VJ_name$Gene
meta_file = "D:/work/project1/PDL1_MC38_TIL/output/1_PDL1_MC38_UMAP_metadata.csv"
tcr_file = "D:/work/project1/PDL1_MC38_TIL/TCR/MB/outs/filtered_contig_annotations.csv"
mymeta <- read.csv(meta_file,row.names = 1)
mytcr <- read.csv(tcr_file,header = T)
dim(mytcr)
#[1] 19565    31
mytcr <- mytcr[mytcr$barcode %in% unique(rownames(mymeta)),]
dim(mytcr)
#[1] 19467    31
mydata <- cbind(mytcr,
mymeta[mytcr$barcode,
c("type","clonotype","cloneFreq_absolute","clonotype_absolute")])
table(mydata$v_gene)
table(mydata$j_gene)
vals <- as.numeric(gsub("myclonotype","",mydata$clonotype_absolute))
mydata <- mydata[order(vals),]
mydata2 <- unique(mydata[,c("v_gene","j_gene","clonotype_absolute","cloneFreq_absolute")])
mydata2$freq_high_low = "high"
mydata2[mydata2$cloneFreq_absolute < 100,]$freq_high_low = "low"
table(mydata2$freq_high_low)
head(mydata2)
setdiff(mydata2$v_gene,VJ_name$Gene)
setdiff(mydata2$j_gene,VJ_name$Gene)
setdiff(VJ_name$Gene,mydata2$j_gene)
head(mydata2)
dim(mydata2)
head(mydata)
mydata2 <- unique(mydata[,c("chain","v_gene","j_gene","clonotype_absolute","cloneFreq_absolute")])
mydata2$freq_high_low = "high"
mydata2[mydata2$cloneFreq_absolute < 100,]$freq_high_low = "low"
table(mydata2$freq_high_low)
head(mydata2)
mydata2_TRA <- mydata2[mydata2$chain == "TRA",]
dim(mydata2_TRA)
head(mydata2_TRA)
library(plyr)
cols <- c("v_gene","j_gene")
apply(mydata2_TRA[,cols],2,count)
head(mydata2_TRA[,c("v_gene","j_gene")])
head(apply(mydata2_TRA[,c("v_gene","j_gene")],2,count)
)
ID <- seq(1:177)
Age <- sample(c("0-15", "16-29", "30-44", "45-64", "65+"), 177, replace = TRUE)
Sex <- sample(c("Male", "Female"), 177, replace = TRUE)
Country <- sample(c("England", "Wales", "Scotland", "N. Ireland"), 177, replace = TRUE)
Health <- sample(c("Poor", "Average", "Good"), 177, replace = TRUE)
Survey <- data.frame(Age, Sex, Country, Health)
mydata2_TRA[, .N, by=.(v_gene, v_gene)]
mydata2_TRA[, .N, by=.(v_gene, v_gene)]
library(data.table)
library(tidyr)
mydata2_TRA[, .N, by=.(v_gene, v_gene)]
head(mydata2_TRA)
mydata2_TRA[, .N, by=.(v_gene, j_gene)]
head(Survey)
Survey[, .N, by=.(Age, Sex, Health)]
head(mydata2_TRA)
counts <- ddply(mydata2_TRA, .(mydata2_TRA$v_gene, mydata2_TRA$j_gene), nrow)
head(counts
)
table(counts$V1)
library(plyr)
meta_file = "D:/work/project1/PDL1_MC38_TIL/output/1_PDL1_MC38_UMAP_metadata.csv"
tcr_file = "D:/work/project1/PDL1_MC38_TIL/TCR/MB/outs/filtered_contig_annotations.csv"
mymeta <- read.csv(meta_file,row.names = 1)
mytcr <- read.csv(tcr_file,header = T)
dim(mytcr)
#[1] 19565    31
mytcr <- mytcr[mytcr$barcode %in% unique(rownames(mymeta)),]
dim(mytcr)
#[1] 19467    31
mydata <- cbind(mytcr,
mymeta[mytcr$barcode,
c("type","clonotype","cloneFreq_absolute","clonotype_absolute")])
table(mydata$v_gene)
table(mydata$j_gene)
vals <- as.numeric(gsub("myclonotype","",mydata$clonotype_absolute))
mydata <- mydata[order(vals),]
dim(mydata)
head(mydata)
mydata2 <- mydata[,c("chain","v_gene","j_gene","clonotype_absolute","cloneFreq_absolute")]
dim(mydata2)
head(mydata2)
counts <- ddply(mydata2, .(mydata2$chain,mydata2$v_gene, mydata2$j_gene), nrow)
head(counts)
counts <- ddply(mydata2, .(mydata2$v_gene, mydata2$j_gene), nrow)
head(counts)
counts <- ddply(mydata2, .(mydata2$chain,mydata2$v_gene, mydata2$j_gene), nrow)
head(counts)
colnames(counts) <- c("chain","v_gene","j_gene","count")
head(counts)
head(VJ_name)
nrow(VJ_name[VJ_name$gene_type == "TRAV",])
TRAV
TRAV <- VJ_name[VJ_name$gene_type == "TRAV",]
TRAV
TRAV <- VJ_name[VJ_name$gene_type == "TRAV",]$Gene
TRAV
table(VJ_name$gene_type)
TRAV <- VJ_name[VJ_name$gene_type == "TRAV",]$Gene
TRAJ <- VJ_name[VJ_name$gene_type == "TRAJ",]$Gene
TRBV <- VJ_name[VJ_name$gene_type == "TRBV",]$Gene
TRBJ <- VJ_name[VJ_name$gene_type == "TRBJ",]$Gene
TRBJ
TRBV
TRAV
TRAJ
51*98
13*23
head(counts)
dim(counts)
length(table(counts$v_gene))
length(table(counts$j_gene))
table(counts$v_gene)
rm(list=ls())
library(org.Hs.eg.db)
eg2symbol=toTable(org.Hs.egSYMBOL)
eg2name=toTable(org.Hs.egGENENAME)
eg2alias=toTable(org.Hs.egALIAS2EG)
head(eg2alias)
a <- split(eg2alias,eg2alias$gene_id
)
head(a)
head(eg2alias)
eg2alis_list=lapply(split(eg2alias,eg2alias$gene_id),function(x){paste0(x[,2],collapse = ";")})
head(eg2alias)
head(eg2alis_list)
8*12
1.2*12
12*12
1.7*5
1.7*12
1.5*12
11*12
6/12
10641+2194+254
964+2194+254
9344+2194+254
10641 -  9344
303*4
11792 - 1212
2000/30
2500/4
10580-2500
8000-2194
3528+250
3528+250-303*4
library(ggplot2)
library(ggpubr)
mydata <- read.table("1_1_boxplot_stat_input.txt",header = T,sep = "\t",stringsAsFactors = F)
getwd()
setwd("D:/study/R/R_PLOT_demo/R_PLOT_demo/1_boxplot")
mydata <- read.table("1_1_boxplot_stat_input.txt",header = T,sep = "\t",stringsAsFactors = F)
mydata <- mydata[,c("Group","CD62Lpos_Treg")]
mydata <- na.omit(mydata)
mydata$Group <- factor(mydata$Group,levels = c("Control","CTLA4_0.07","CTLA4_0.2","CTLA4_0.2_CD8"))
## PLOT
my_comparisons <- list(c("Control", "CTLA4_0.07"), c("Control", "CTLA4_0.2"),
c("Control", "CTLA4_0.2_CD8"),c("CTLA4_0.2","CTLA4_0.2_CD8"))
ggplot(mydata, aes(Group,CD62Lpos_Treg)) +
#geom_boxplot(outlier.shape = NA) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(width = 0.6,outlier.shape = NA) +
geom_jitter(aes(color=Group),width = 0.25,size=4,shape=19) +
stat_compare_means(comparisons = my_comparisons,method="t.test",label.y =  c(45,47,49,51)) +
#stat_compare_means(method = "anova") +
#scale_fill_manual(values = c("#7FCBD7","#857EBB","#CA9DD7","#FACBD3")) +
scale_color_manual(values = c("#737373","#4EBBD5","#01A087","#E64B35")) +
theme_bw()+
scale_y_continuous(limits = c(15,53)) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=13, colour = "black"),
axis.title=element_text(size=13),
plot.title = element_text(size=10,hjust = 0.5),
legend.text = element_text(size=10))  +
labs(x = "", y = "CD62Lpos_Treg",title = "")
mydata <- read.table("1_1_boxplot_stat_input.txt",header = T,sep = "\t",stringsAsFactors = F)
mydata
mydata$Group <- factor(mydata$Group,levels = c("Control","A","B","C"))
mydata$Group
my_comparisons <- list(c("Control", "A"), c("Control", "B"),
c("Control", "C"),c("B","C"))
ggplot(mydata, aes(Group,Value)) +
#geom_boxplot(outlier.shape = NA) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(width = 0.6,outlier.shape = NA) +
geom_jitter(aes(color=Group),width = 0.25,size=4,shape=19) +
stat_compare_means(comparisons = my_comparisons,method="t.test",label.y =  c(45,47,49,51)) +
#stat_compare_means(method = "anova") +
#scale_fill_manual(values = c("#7FCBD7","#857EBB","#CA9DD7","#FACBD3")) +
scale_color_manual(values = c("#737373","#4EBBD5","#01A087","#E64B35")) +
theme_bw()+
scale_y_continuous(limits = c(15,53)) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=13, colour = "black"),
axis.title=element_text(size=13),
plot.title = element_text(size=10,hjust = 0.5),
legend.text = element_text(size=10))  +
labs(x = "", y = "Value",title = "")
ggsave("1_1_boxplot_stat_plot.pdf")
?ggsave
ggsave("1_1_boxplot_stat_plot.png",device = "png")
library(ggplot2)
library(scales)
setwd("D:/work/task_JZ/Plot20211009")
mydata <- read.table("input1.txt",sep = "\t",header = 1)
pdata <- mydata[,c("CTLA4_ug_ml","group","live.cells_percentage")]
#pdata$CTLA4 <- as.factor(pdata$CTLA4)
pdata$group <- factor(pdata$group, levels = c("CD62Lneg","CD62Lpos"))
ggplot(pdata,
aes(x = CTLA4_ug_ml, y = live.cells_percentage,color = group)) +
geom_point(aes(size = live.cells_percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
#scale_color_manual(values = c("#034e7b","#74a9cf","#e7298a","#fb9a99")) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2) +
theme_bw() +
scale_x_continuous(trans = log10_trans(),limits = c(0.002,5),
breaks = pdata$CTLA4_ug_ml[1:8],
labels= pdata$CTLA4_ug_ml[1:8]) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=13, colour = "black"),
axis.title=element_text(size=13),
plot.title = element_text(size=10,hjust = 0.5),
legend.text = element_text(size=10))  +
labs(x = "anti-CTLA4", y = "Value",title = "")
library(ggplot2)
library(scales)
setwd("D:/work/task_JZ/20211009_Plot")
mydata <- read.table("input1.txt",sep = "\t",header = 1)
pdata <- mydata[,c("CTLA4_ug_ml","group","live.cells_percentage")]
#pdata$CTLA4 <- as.factor(pdata$CTLA4)
pdata$group <- factor(pdata$group, levels = c("CD62Lneg","CD62Lpos"))
ggplot(pdata,
aes(x = CTLA4_ug_ml, y = live.cells_percentage,color = group)) +
geom_point(aes(size = live.cells_percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
#scale_color_manual(values = c("#034e7b","#74a9cf","#e7298a","#fb9a99")) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2) +
theme_bw() +
scale_x_continuous(trans = log10_trans(),limits = c(0.002,5),
breaks = pdata$CTLA4_ug_ml[1:8],
labels= pdata$CTLA4_ug_ml[1:8]) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=13, colour = "black"),
axis.title=element_text(size=13),
plot.title = element_text(size=10,hjust = 0.5),
legend.text = element_text(size=10))  +
labs(x = "anti-CTLA4", y = "Value",title = "")
library(ggplot2)
library(scales)
setwd("D:/study/R/R_PLOT_demo/R_PLOT_demo/2_geom_smooth")
mydata <- read.table("2_1_geom_smooth_lm_input.txt",sep = "\t",header = 1)
mydata
pdata <- mydata[,c("Time","Group","Percentage")]
pdata
pdata$Group <- factor(pdata$Group, levels = c("neg","pos"))
pdata$Group
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(4, 5))
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
scale_color_manual(values = c( "#034e7b","#e7298a"))
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2)
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2) +
theme_bw() +
scale_x_continuous(trans = log10_trans(),limits = c(1,8),
breaks = pdata$Time[1:8],
labels= pdata$Time[1:8])
log10(1)
log10(2)
log10(3)
log10(4)
log10(5)
log10(6)
log10(7)
log10(8)
log10(2) - log10(1)
log10(3) - log10(2)
log10(4) - log10(3)
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2) +
theme_bw() +
scale_x_continuous(trans = log10_trans(),limits = c(1,8),
breaks = pdata$Time[1:8],
labels= pdata$Time[1:8]) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=13, colour = "black"),
axis.title=element_text(size=13),
plot.title = element_text(size=10,hjust = 0.5),
legend.text = element_text(size=10))  +
labs(x = "Time", y = "Percentage",title = "")
ggsave("2_1_geom_smooth_lm_plot.png",device = "png")
log10(10)
log10(100)
library(ggplot2)
library(scales)
setwd("D:/study/R/R_PLOT_demo/R_PLOT_demo/2_geom_smooth")
mydata <- read.table("2_1_geom_smooth_lm_input.txt",sep = "\t",header = 1)
pdata <- mydata[,c("Time","Group","Percentage")]
pdata$Group <- factor(pdata$Group, levels = c("neg","pos"))
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2) +
theme_bw() +
scale_x_continuous(trans = log10_trans(),limits = c(1,8),
breaks = pdata$Time[1:8],
labels= pdata$Time[1:8]) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=13, colour = "black"),
axis.title=element_text(size=13),
plot.title = element_text(size=10,hjust = 0.5),
legend.text = element_text(size=10))  +
labs(x = "Time", y = "Percentage",title = "")
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2) +
theme_bw() +
scale_x_continuous(trans = log10_trans(),limits = c(1,10000000),
breaks = pdata$Time[1:8],
labels= pdata$Time[1:8]) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=13, colour = "black"),
axis.title=element_text(size=13),
plot.title = element_text(size=10,hjust = 0.5),
legend.text = element_text(size=10))  +
labs(x = "Time", y = "Percentage",title = "")
ggsave("2_1_geom_smooth_lm_plot.png",device = "png",width = 8,height = 5)
ggsave("2_1_geom_smooth_lm_plot.png",device = "png",width = 6,height = 3.5)
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(4, 5)) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2) +
theme_bw() +
scale_x_continuous(trans = log10_trans(),limits = c(1,10000000),
breaks = pdata$Time[1:8],
labels= pdata$Time[1:8]) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=8, colour = "black"),
axis.title=element_text(size=8),
plot.title = element_text(size=8,hjust = 0.5),
legend.text = element_text(size=8))  +
labs(x = "Time", y = "Percentage",title = "")
ggsave("2_1_geom_smooth_lm_plot.png",device = "png",width = 6,height = 3.5)
ggplot(pdata,
aes(x = Time, y = Percentage,color = Group)) +
geom_point(aes(size = Percentage), alpha = 0.8) +
scale_size(range = c(2, 4)) +
scale_color_manual(values = c( "#034e7b","#e7298a")) +
#geom_point(alpha = 0.65, aes(size = mpg)) +
geom_smooth(method = "lm", formula = y ~ x + I(x^2),
se = F, size = 0.5, linetype = 2) +
theme_bw() +
scale_x_continuous(trans = log10_trans(),limits = c(1,10000000),
breaks = pdata$Time[1:8],
labels= pdata$Time[1:8]) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=8, colour = "black"),
axis.title=element_text(size=8),
plot.title = element_text(size=8,hjust = 0.5),
legend.text = element_text(size=8))  +
labs(x = "Time", y = "Percentage",title = "")
ggsave("2_1_geom_smooth_lm_plot.png",device = "png",width = 6,height = 3.5)
library(ggplot2)
library(ggpubr)
setwd("D:/study/R/R_PLOT_demo/R_PLOT_demo/1_boxplot")
mydata <- read.table("1_1_boxplot_stat_input.txt",header = T,sep = "\t",stringsAsFactors = F)
mydata <- na.omit(mydata)
mydata$Group <- factor(mydata$Group,levels = c("Control","A","B","C"))
## PLOT
my_comparisons <- list(c("Control", "A"), c("Control", "B"),
c("Control", "C"),c("B","C"))
ggplot(mydata, aes(Group,Value)) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(width = 0.6,outlier.shape = NA) +
geom_jitter(aes(color=Group),width = 0.25,size=2.5,shape=19) +
stat_compare_means(comparisons = my_comparisons,method="t.test",label.y =  c(45,47,49,51)) +
#stat_compare_means(method = "anova") +
#scale_fill_manual(values = c("#7FCBD7","#857EBB","#CA9DD7","#FACBD3")) +
scale_color_manual(values = c("#737373","#4EBBD5","#01A087","#E64B35")) +
theme_bw()+
scale_y_continuous(limits = c(15,53)) +
theme(panel.grid = element_blank(),
#legend.position = c(0.8,0.3),
legend.title = element_blank(),
axis.text=element_text(size=13, colour = "black"),
axis.title=element_text(size=13),
plot.title = element_text(size=10,hjust = 0.5),
legend.text = element_text(size=10))  +
labs(x = "", y = "Value",title = "")
ggsave("1_1_boxplot_stat_plot.png",device = "png")
